#version 330

in vec3 ocolor;

in vec3 FragPos;
in vec4 FragPosLightSpace;
uniform sampler2D shadowMap;
uniform vec3 lightPos;

out vec4 out_color;

float ShadowCalculation(vec4 fragPosLightSpace) {
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    projCoords = projCoords * 0.5 + 0.5;
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    float currentDepth = projCoords.z;
	
	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
	for(int x = -1; x <= 1; ++x)
	{
	    for(int y = -1; y <= 1; ++y)
	    {
	        float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
	        shadow += currentDepth > pcfDepth ? 1.0 : 0.0;        
	    }    
	}
	shadow /= 9.0;
	
	if(projCoords.z > 1.0)
        shadow = 0.0;
	
    return shadow;
    
}

void main(){	
	float shadow = ShadowCalculation(FragPosLightSpace);
	shadow = 1 - clamp(shadow, 0, 0.6);
	
	vec4 color = shadow * vec4(ocolor, 1.0);
	if(color.w == 0) discard;
	out_color = color;

	
}